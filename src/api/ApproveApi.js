/**
 * ApproveAPI
 * The simple API to request a user's approval on anything via email + sms.
 *
 * OpenAPI spec version: 1
 * Contact: dev@approveapi.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/Prompt', 'model/PromptStatus'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/Prompt'), require('../model/PromptStatus'));
  } else {
    // Browser globals (root is window)
    if (!root.ApproveapiSwaggerJs) {
      root.ApproveapiSwaggerJs = {};
    }
    root.ApproveapiSwaggerJs.ApproveApi = factory(root.ApproveapiSwaggerJs.ApiClient, root.ApproveapiSwaggerJs.Error, root.ApproveapiSwaggerJs.Prompt, root.ApproveapiSwaggerJs.PromptStatus);
  }
}(this, function(ApiClient, Error, Prompt, PromptStatus) {
  'use strict';

  /**
   * Approve service.
   * @module api/ApproveApi
   * @version 1
   */

  /**
   * Constructs a new ApproveApi. 
   * @alias module:api/ApproveApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createPrompt operation.
     * @callback module:api/ApproveApi~createPromptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Prompt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sending a prompt
     * Creates a prompt and pushes it to the user (sends via email, sms, or other supported protocols).
     * @param {String} user The user to send the approval request to. Can be either an email address or a phone number.
     * @param {String} body The body of the approval request to show the user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.title The title of an approval request. Defaults to an empty string.
     * @param {String} opts.approve_text The approve action text. Defaults to &#39;Approve&#39;.
     * @param {String} opts.reject_text The reject action text. Defaults to &#39;Reject&#39;.
     * @param {Boolean} opts.long_poll If true, the request waits (long-polls) until the user responds to the prompt or more than 10 minutes pass. Defaults to false.
     * @param {module:api/ApproveApi~createPromptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Prompt}
     */
    this.createPrompt = function(user, body, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling createPrompt");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPrompt");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'user': user,
        'body': body,
        'title': opts['title'],
        'approve_text': opts['approve_text'],
        'reject_text': opts['reject_text'],
        'long_poll': opts['long_poll']
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = Prompt;

      return this.apiClient.callApi(
        '/prompt', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPrompt operation.
     * @callback module:api/ApproveApi~getPromptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Prompt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a prompt
     * Retrieve the prompt object with the given ID.
     * @param {String} id The identifier for a pending or completed prompt. This is returned when you create a prompt.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.long_poll If true, the request waits (long-polls) until the user responds to the prompt or more than 10 minutes pass. Defaults to false.
     * @param {module:api/ApproveApi~getPromptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Prompt}
     */
    this.getPrompt = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPrompt");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'long_poll': opts['long_poll'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKey'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = Prompt;

      return this.apiClient.callApi(
        '/prompt/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPromptStatus operation.
     * @callback module:api/ApproveApi~getPromptStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PromptStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check prompt status
     * Returns whether a prompt has been completed by the user. This request does not require authentication, and so can be used client-side without sharing API credentials.
     * @param {String} id The prompt identifier.
     * @param {module:api/ApproveApi~getPromptStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PromptStatus}
     */
    this.getPromptStatus = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPromptStatus");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = PromptStatus;

      return this.apiClient.callApi(
        '/prompt/{id}/status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
